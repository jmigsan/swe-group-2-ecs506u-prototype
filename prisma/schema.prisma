// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}



model favorites{
  coin String
  symbol String
  user Investor @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId String
  @@id([userId, coin])
}

model User {
  firstName  String
  email      String   @id
  password   String
  createDate DateTime @default(now())
  updateDate DateTime @updatedAt
  role       String
  staff      Staff?
  investor   Investor?
}

model Staff {
  userId      String @unique @id
  user        User   @relation(fields: [userId], references: [email])
}

model Investor {
  userId      String @unique @id
  user        User   @relation(fields: [userId], references: [email])
  Favorites favorites[]
  Currencies Balance []
  Trades Trade[]
  LimitOrders LimitOrder[]
}


model Cryptos{
  coin String @id
  id Int
  symbol String
  createDate DateTime @default(now())
}

model Balance{
  currency String
  amount Float
  user Investor @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId String
  @@id([userId, currency])
}


model Trade{
  id Int @id @default(autoincrement())
  Bought String
  Sold String
  Type String
  Price Float
  AmountBought Float
  AmountSold Float
  user Investor @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId String
  createDate DateTime @default(now())
}

model LimitOrder{
    id Int @id @default(autoincrement())
  Bought String
  Sold String
  Type String
  Price Float
  AmountBought Float
  AmountSold Float
  user Investor @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model chatRequests{
  userId String @id
}

model chatPairs{
  userId String 
  staffId String
  @@id([userId, staffId])
}